//this var comes from the vertex shader
//they are baricentric interpolated by pixel according to the distance to every vertex
varying vec3 v_wPos;
varying vec3 v_wNormal;

//------------
uniform mat4 model;

varying vec2 v_coord;
uniform sampler2D color_texture;
uniform sampler2D normal_texture;

uniform vec3 Ka,Ia,Kd,Id,Is,Ks;
uniform vec3 eye,lp;
uniform float alpha;
uniform float blend;
vec4 color;
vec4 Ip;
vec3 ambient;
//------------

//here create uniforms for all the data we need here

void main()
{
	//vec3 normal = v_wNormal;
	vec3 pos = v_wPos;
	//here we set up the normal as a color to see them as a debug
	vec4 color_text = texture2D(color_texture, v_coord );
	vec3 texNormal = texture2D( normal_texture, v_coord ).xyz; //Texture normal

	
	//here write the computations for PHONG.
	vec3 textureNormal = (2*texNormal)-1;
	textureNormal = normalize(textureNormal);
	vec3 normal = (model * vec4( textureNormal, 0.0)).xyz;
	
	vec3 L=normalize(lp-pos);
	vec3 V= normalize(eye-pos);
	vec3 R= reflect(L*-(1),normal);
	R=normalize(R);

	//Ks = tex_pixel.xyz * tex_pixel.w;
	
	ambient = Ka*Ia;
	float lightPointNorm = dot(L,normal);
	if(lightPointNorm < 0){
			lightPointNorm = 0;
		}
	
	vec3 difuse = Kd*lightPointNorm * Id;
	float rp=dot(R,V); 
		if(rp<0){
			rp=0; 
		}
		
	float refPointCam = pow(rp,alpha);
	
	vec3 specular = Ks*refPointCam*Is;

	Ip= vec4(difuse,blend)*color_text+vec4(specular,blend);
	
	//color = vec4(ambient,blend)*color_text+Ip;
	color =color_text*Ip;
	
	//set the ouput color por the pixel
	gl_FragColor = color;
}
